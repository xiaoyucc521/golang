// 定义proto语法版本，这里指定使用proto3版本
syntax = "proto3";

// 这里随便定义个包名
package grpc.user;

// go需要增加这个选项，否则会报错；值用分号分隔，前者表示生成*.pb.go文件目录，会自动创建，这里指定当前目录中的protobuf目录，后者表示生成go文件里的包名，最好和当前目录名一致否则无法使用到
option go_package = "./pb;pb";

service grpcRequestMode {
  // 一、简单模式（Simple RPC）: 客户端发起请求并等待服务端响应，就是普通的 Ping-Pong 模式。
  // 空函数，用与检测客户端和服务端是否通畅
  rpc Ping (GrpcEmpty) returns (GrpcPingResponse) {}

  // 二、服务端流式（Server-side streaming RPC）: 服务端发送数据，客户端接收数据。客户端发送请求到服务器，拿到一个流去读取返回的消息序列。客户端读取返回的流，直到里面没有任何消息。
  rpc ServerStream (StreamRequest) returns (stream StreamResponse){}

  // 三、客户端流式（Client-side streaming RPC）: 与服务端数据流模式相反，这次是客户端源源不断的向服务端发送数据流，而在发送结束后，由服务端返回一个响应。
  // 计算求和的方式来测试服务端流
  rpc Sum (stream SumRequest) returns (SumResponse) {}
  rpc ClientStream (stream StreamRequest) returns (StreamResponse){}

  // 四、双向流式（Bidirectional streaming RPC）: 双方使用读写流去发送一个消息序列，两个流独立操作，双方可以同时发送和同时接收。
  rpc Streaming (stream StreamRequest) returns (stream StreamResponse){}
}

message GrpcEmpty {}

message GrpcPingResponse {
  string message = 1;
}

message SumRequest {
  int64 num = 1;
}

message SumResponse {
  int64 result = 1;
}

message StreamRequest {
  string input = 1;
}

message StreamResponse {
  string output = 1;
}

// 执行命令
// protoc --go_out=. --go-grpc_out=. ./grpc_request_mode.proto